{"version":3,"sources":["components/Address.jsx","App.js","serviceWorker.js","index.js"],"names":["FlexAddress","styled","div","AddressDetail","useStyles","makeStyles","theme","backIcon","fontSize","color","expandIcon","FlexCenter","Address","classes","className","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6nBAMA,IAAMA,EAAcC,IAAOC,IAAV,KAIXC,EAAgBF,IAAOC,IAAV,KAWbE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,SAAU,CACNC,SAAU,OACVC,MAAO,WAEXC,WAAY,CACRF,SAAU,OACVC,MAAO,eAITE,EAAaV,YAAOD,EAAPC,CAAH,KAKD,SAASW,IACpB,IAAMC,EAAUT,IAEhB,OACI,kBAACJ,EAAD,KACI,kBAACW,EAAD,KACI,kBAAC,IAAD,CAAUG,UAAWD,EAAQN,YAEjC,kBAACJ,EAAD,KACI,iDACA,kBAACH,EAAD,KACI,iDACA,kBAAC,IAAD,CAAYc,UAAWD,EAAQH,gB,oOC5CnD,IAAMK,EAASd,IAAOC,IAAV,KAgBGc,MARf,WACI,OACI,kBAACD,EAAD,KACI,kBAACH,EAAD,QCJQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8fc595f.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport BackIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport ExpandIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst FlexAddress = styled.div`\n    display: flex;\n`;\n\nconst AddressDetail = styled.div`\n    & p {\n        margin: 0 0 4px 0;\n        font-size: 8px;\n    }\n\n    & span {\n        font-size: 16px;\n    }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n    backIcon: {\n        fontSize: \"24px\",\n        color: \"#424749\",\n    },\n    expandIcon: {\n        fontSize: \"24px\",\n        color: \"#f9423a\",\n    },\n}));\n\nconst FlexCenter = styled(FlexAddress)`\n    align-items: center;\n    margin-right: 16px;\n`;\n\nexport default function Address() {\n    const classes = useStyles();\n\n    return (\n        <FlexAddress>\n            <FlexCenter>\n                <BackIcon className={classes.backIcon} />\n            </FlexCenter>\n            <AddressDetail>\n                <p>ALAMAT PENGANTARAN</p>\n                <FlexAddress>\n                    <span>Tokopedia Tower</span>\n                    <ExpandIcon className={classes.expandIcon} />\n                </FlexAddress>\n            </AddressDetail>\n        </FlexAddress>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Address } from \"./components\";\n\nconst Layout = styled.div`\n    @import url(\"https://fonts.googleapis.com/css2?family=Noto+Sans+SC&display=swap\");\n\n    width: 317px;\n\n    font-family: \"Noto Sans SC\", sans-serif;\n`;\n\nfunction App() {\n    return (\n        <Layout>\n            <Address />\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}